# -*- coding: utf-8 -*-
"""NgoTheTu_lw5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q2Y4m4_7_90OAjM4Nzz6Cz8XqSJXjR70
"""

from matplotlib import pyplot as plt
import matplotlib.image as mpimg
import numpy as np
from PIL import Image
import os.path
from numba import cuda
import time

imagefile = mpimg.imread('/content/drive/MyDrive/M21.ICT.012_NgoTheTu.jpeg')
imgplot = plt.imshow(imagefile)
plt.show()

height, width, count = imagefile.shape
pixelCount = height*width

img1 = imagefile.copy()

#Gray_scale
def gray_scale(img):
  height, width, c1 = img.shape

  for i in range(height):
    for j in range(width):
      gray = img[i][j][0]/3 + img[i][j][1]/3 + img[i][j][2]/3
      img[i][j][0] = gray
      img[i][j][1] = gray
      img[i][j][2] = gray
  return(img)

t1 = time.time()
img1 = gray_scale(img1)
t2 = time.time()

wait_time = t2-t1
print(str(wait_time))
imgplot = plt.imshow(img1)
plt.show()

img2 = imagefile.copy()
devdata2 = cuda.to_device(img2)
devOutput2 = cuda.device_array(np.shape(img2),np.uint8)

@cuda.jit 
def grayscale(src, dst): 
  #1D to 2D block
  tidx = cuda.threadIdx.x + cuda.blockIdx.x * cuda.blockDim.x
  tidy = cuda.threadIdx.y + cuda.blockIdx.y * cuda.blockDim.y
  g = np.uint8(src[tidx, tidy, 0]/3 + src[tidx, tidy, 1]/3 + src[tidx, tidy, 2]/3)
  dst[tidx, tidy, 0] = dst[tidx, tidy, 1] = dst[tidx, tidy, 2] = g


t3 = time.time()
blockSize = (8,8)
gridSize = (img2.shape[0] // blockSize[0], img2.shape[1] // blockSize[1])
grayscale[gridSize, blockSize](devdata2, devOutput2)
t4 = time.time()

wait_time = t4-t3
reshape_img2 = devOutput2.copy_to_host()

print(str(wait_time))
imgplot = plt.imshow(reshape_img2)
plt.show()

filter = [[0, 0, 1, 2, 1, 0, 0],
[0, 3, 13, 22, 13, 3, 0],
[1, 13, 59, 97, 59, 13, 1],
[2, 22, 97, 159, 97, 22, 2],
[1, 13, 59, 97, 59, 13, 1],
[0, 3, 13, 22, 13, 3, 0],
[0, 0, 1, 2, 1, 0, 0]]